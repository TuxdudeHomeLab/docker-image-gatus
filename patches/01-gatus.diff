diff -u -r -N a/gatus/config/endpoint/endpoint.go b/gatus/config/endpoint/endpoint.go
--- a/gatus/config/endpoint/endpoint.go	2024-08-20 21:23:40.541721312 -0700
+++ b/gatus/config/endpoint/endpoint.go	2024-08-21 09:25:40.076033636 -0700
@@ -80,6 +80,12 @@
 	// Group the endpoint is a part of. Used for grouping multiple endpoints together on the front end.
 	Group string `yaml:"group,omitempty"`
 
+	// Controls the overall ordering of the groups.
+	GroupOrder string `yaml:"group-order,omitempty"`
+
+	// Controls the ordering of this endpoint within the group.
+	WithinGroupOrder string `yaml:"within-group-order,omitempty"`
+
 	// URL to send the request to
 	URL string `yaml:"url"`
 
@@ -164,6 +170,12 @@
 	if err := validateEndpointNameGroupAndAlerts(e.Name, e.Group, e.Alerts); err != nil {
 		return err
 	}
+	if len(e.GroupOrder) == 0 {
+		e.GroupOrder = "z"
+	}
+	if len(e.WithinGroupOrder) == 0 {
+		e.WithinGroupOrder = "z"
+	}
 	if len(e.URL) == 0 {
 		return ErrEndpointWithNoURL
 	}
diff -u -r -N a/gatus/config/endpoint/external_endpoint.go b/gatus/config/endpoint/external_endpoint.go
--- a/gatus/config/endpoint/external_endpoint.go	2024-08-20 21:23:40.541721312 -0700
+++ b/gatus/config/endpoint/external_endpoint.go	2024-08-21 09:26:05.328714775 -0700
@@ -24,6 +24,12 @@
 	// Group the endpoint is a part of. Used for grouping multiple endpoints together on the front end.
 	Group string `yaml:"group,omitempty"`
 
+	// Controls the overall ordering of the groups.
+	GroupOrder string `yaml:"group-order,omitempty"`
+
+	// Controls the ordering of this endpoint within the group.
+	WithinGroupOrder string `yaml:"within-group-order,omitempty"`
+
 	// Token is the bearer token that must be provided through the Authorization header to push results to the endpoint
 	Token string `yaml:"token,omitempty"`
 
@@ -42,6 +48,12 @@
 	if err := validateEndpointNameGroupAndAlerts(externalEndpoint.Name, externalEndpoint.Group, externalEndpoint.Alerts); err != nil {
 		return err
 	}
+	if len(externalEndpoint.GroupOrder) == 0 {
+		externalEndpoint.GroupOrder = "z"
+	}
+	if len(externalEndpoint.WithinGroupOrder) == 0 {
+		externalEndpoint.WithinGroupOrder = "z"
+	}
 	if len(externalEndpoint.Token) == 0 {
 		return ErrExternalEndpointWithNoToken
 	}
diff -u -r -N a/gatus/storage/store/sql/specific_sqlite.go b/gatus/storage/store/sql/specific_sqlite.go
--- a/gatus/storage/store/sql/specific_sqlite.go	2024-08-20 21:23:40.545721421 -0700
+++ b/gatus/storage/store/sql/specific_sqlite.go	2024-08-20 21:26:07.789786014 -0700
@@ -3,10 +3,12 @@
 func (s *Store) createSQLiteSchema() error {
 	_, err := s.db.Exec(`
 		CREATE TABLE IF NOT EXISTS endpoints (
-			endpoint_id    INTEGER PRIMARY KEY,
-			endpoint_key   TEXT UNIQUE,
-			endpoint_name  TEXT NOT NULL,
-			endpoint_group TEXT NOT NULL,
+			endpoint_id                 INTEGER PRIMARY KEY,
+			endpoint_key                TEXT UNIQUE,
+			endpoint_name               TEXT NOT NULL,
+			endpoint_group              TEXT NOT NULL,
+			endpoint_group_order        TEXT NOT NULL,
+			endpoint_within_group_order TEXT NOT NULL,
 			UNIQUE(endpoint_name, endpoint_group)
 		)
 	`)
diff -u -r -N a/gatus/storage/store/sql/sql.go b/gatus/storage/store/sql/sql.go
--- a/gatus/storage/store/sql/sql.go	2024-08-20 21:23:40.545721421 -0700
+++ b/gatus/storage/store/sql/sql.go	2024-08-21 09:35:45.036303506 -0700
@@ -516,10 +516,12 @@
 	//log.Printf("[sql.insertEndpoint] Inserting endpoint with group=%s and name=%s", ep.Group, ep.Name)
 	var id int64
 	err := tx.QueryRow(
-		"INSERT INTO endpoints (endpoint_key, endpoint_name, endpoint_group) VALUES ($1, $2, $3) RETURNING endpoint_id",
+		"INSERT INTO endpoints (endpoint_key, endpoint_name, endpoint_group, endpoint_group_order, endpoint_within_group_order) VALUES ($1, $2, $3, $4, $5) RETURNING endpoint_id",
 		ep.Key(),
 		ep.Name,
 		ep.Group,
+		ep.GroupOrder,
+		ep.WithinGroupOrder,
 	).Scan(&id)
 	if err != nil {
 		return 0, err
@@ -609,7 +611,7 @@
 }
 
 func (s *Store) getAllEndpointKeys(tx *sql.Tx) (keys []string, err error) {
-	rows, err := tx.Query("SELECT endpoint_key FROM endpoints ORDER BY endpoint_key")
+	rows, err := tx.Query("SELECT endpoint_key FROM endpoints ORDER BY endpoint_group_order, endpoint_group, endpoint_within_group_order, endpoint_name")
 	if err != nil {
 		return nil, err
 	}
